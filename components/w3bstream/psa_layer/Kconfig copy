mainmenu "W3B Stream SDK Config"

menu "PSA Cryptography"

    config PSA_CRYPTO_C
        bool "Enable the Platform Security Architecture cryptography API"
        default y
        help
            Enable the Platform Security Architecture cryptography API.
            
            Module:  library/psa_crypto.c

    menu "Random Generator"

        config PSA_CRYPTO_EXTERNAL_RNG
            bool "Use an External Random Generator"
            default y
            help 
                Make the PSA Crypto module use an external random generator provided
                by a driver, instead of IOTEX's entropy and DRBG modules.
                
                This random generator must deliver random numbers with cryptographic
                quality and high performance. It must supply unpredictable numbers
                with a uniform distribution. The implementation of this function
                is responsible for ensuring that the random generator is seeded
                with sufficient entropy. If you have a hardware TRNG which is slow
                or delivers non-uniform output, declare it as an entropy source
                with iotex_entropy_add_source() instead of enabling this option.
                
                If you enable this option, you must configure the type
                ::iotex_psa_external_random_context_t in psa/crypto_platform.h
                and define a function called iotex_psa_external_get_random()
                with the following prototype:
                
                ```
                psa_status_t iotex_psa_external_get_random(
                    iotex_psa_external_random_context_t *context,
                    uint8_t *output, size_t output_size, size_t *output_length);
                ```
                
                The context value is initialized to 0 before the first call.
                The function must fill the output buffer with output_size bytes
                of random data and set *output_length to output_size.
                
                warning If you enable this option, code that uses the PSA cryptography
                interface will not use any of the entropy sources set up for the entropy module, 
                nor the NV seed that PSA_ENTROPY_NV_SEED enables.

        menu "Entropy Configration"
            depends on !PSA_CRYPTO_EXTERNAL_RNG

            config PSA_ENTROPY_C
                bool "Enable the Platform-specific Entropy Code"
                depends on PSA_SHA512_C || PSA_SHA512_C
                default y
                help
                    Enable the platform-specific entropy code.
                    
                    Module:  library/entropy.c
                    Caller:
                    
                    This module provides a generic entropy pool
                    

            config PSA_NO_DEFAULT_ENTROPY_SOURCES
                bool "Do Not Add Default Entropy Sources"
                default n
                help
                    Do not add default entropy sources in iotex_entropy_init().
                    
                    This is useful to have more control over the added entropy sources in an application.
                    
                    Enable this macro to prevent loading of default entropy functions.
                    
            config PSA_NO_PLATFORM_ENTROPY
                bool "Disable the Built-in Platform Entropy Functions"
                default y
                help 
                    Do not use built-in platform entropy functions.
                    This is useful if your platform does not support standards like the /dev/urandom or Windows CryptoAPI.
                    
                    Enable this macro to disable the built-in platform entropy functions.

            config PSA_ENTROPY_HARDWARE_ALT
                bool "Use Ext Implementation of a Hardware Entropy Collector. (HEC)"
                help
                    Your function must be called iotex_hardware_poll(), have the same prototype as declared in library/entropy_poll.h, 
                    and accept NULL as first argument.
                    
                    Enable to use your own hardware entropy collector.

            config PSA_ENTROPY_FORCE_SHA256
                bool "Force the Entropy Accumulator to Use a SHA-256 Accumulator"
                depends on PSA_SHA256_C
                default n
                help
                    Force the entropy accumulator to use a SHA-256 accumulator instead of the default SHA-512 based one (if both are available).

                    On 32-bit systems SHA-256 can be much faster than SHA-512. 
                    Use this option if you have performance concerns.
                    
                    This option is only useful if both PSA_SHA256_C and PSA_SHA512_C are defined. 
                    Otherwise the available hash module is used.

            config PSA_ENTROPY_NV_SEED
                bool "Enable the Non-volatile (NV) Seed File-based Entropy Source."
                depends on PSA_ENTROPY_C
                default n
                help
                    Enable the non-volatile (NV) seed file-based entropy source.
                    (Also enables the NV seed read/write functions in the platform layer)
                    
                    This is crucial (if not required) on systems that do not have a
                    cryptographic entropy source (in hardware or kernel) available.
                    
                    The read/write functions that are used by the entropy source are
                    determined in the platform layer, and can be modified at runtime and/or
                    compile-time depending on the flags (PSA_PLATFORM_NV_SEED_*) used.
                    
                    If you use the default implementation functions that read a seedfile
                    with regular fopen(), please make sure you make a seedfile with the
                    proper name (defined in PSA_PLATFORM_STD_NV_SEED_FILE) and at
                    least IOTEX_ENTROPY_BLOCK_SIZE bytes in size that can be read from
                    and written to or you will get an entropy source error! The default
                    implementation will only use the first PSA_ENTROPY_BLOCK_SIZE
                    bytes from the file.
                    
                    The entropy collector will write to the seed file before entropy is
                    given to an external source, to update it.

            config PSA_INJECT_ENTROPY
                bool "Enable Support for Entropy Injection"
                default n
                help
                    Enable support for entropy injection at first boot. This feature is
                    required on systems that do not have a built-in entropy source (TRNG).
                    This feature is currently not supported on systems that have a built-in entropy source.

        endmenu
        
    endmenu


    menuconfig PSA_CIPHER_ENABLE
        bool "Enable PSA Cipher Module"
        default y

    if PSA_CIPHER_ENABLE
        
        menu "PSA Cipher Compatible Types"
        
            config PSA_CIPHER_SUPPORT_AES
                bool "Support PSA Cipher Key Type -- AES"
                default  y

            config PSA_CIPHER_SUPPORT_ARIA
                bool "Support PSA Cipher Key Type -- ARIA"
                default n

            config PSA_CIPHER_SUPPORT_DES
                bool "Support PSA Cipher Key Type -- DES"
                default n

            config PSA_CIPHER_SUPPORT_CAMELLIA
                bool "Support PSA Cipher Key Type -- CAMELLIA"
                default n

            config PSA_CIPHER_SUPPORT_SM4
                bool "Support PSA Cipher Key Type -- SM4"
                default n

            config PSA_CIPHER_SUPPORT_CHACHA20
                bool "Support PSA Cipher Key Type -- CHACHA20"
                default n                
                    
        endmenu

        menu "PSA Cipher MODE Support"
        
            config PSA_CIPHER_MODE_CBC_SUPPORT
                bool "Enable Cipher Block Chaining mode (CBC)"
                default y
                help
                    Enable Cipher Block Chaining mode (CBC) for symmetric ciphers.

            config PSA_CIPHER_MODE_CFB_SUPPORT
                bool "Enable Cipher Feedback mode (CFB)"
                default n
                help
                    Enable Cipher Feedback mode (CFB) for symmetric ciphers.

            config PSA_CIPHER_MODE_CTR_SUPPORT
                bool "Enable Counter Block Cipher mode (CTR)"
                default y
                help
                    Enable Counter Block Cipher mode (CTR) for symmetric ciphers. 

            config PSA_CIPHER_MODE_OFB_SUPPORT
                bool "Enable Output Feedback mode (OFB)"
                default n
                help
                    Enable Output Feedback mode (OFB) for symmetric ciphers.

            config PSA_CIPHER_MODE_XTS_SUPPORT
                bool "Enable Xor-encrypt-xor with ciphertext stealing mode (XTS)"
                default n
                depends on PSA_CIPHER_SUPPORT_AES
                help
                    Enable Xor-encrypt-xor with ciphertext stealing mode (XTS) for AES.
                              
        endmenu

        menuconfig PSA_CIPHER_PADDING_ENABLE
            bool  "PSA Cipher Padding Mode Enable"
            default y
            help 
                PSA_CIPHER_PADDING_XXX: Enable or Disable macros to add support for
                specific padding modes in the cipher layer with cipher modes that support padding (e.g. CBC)
                
                If you disable all padding modes, only full blocks can be used with CBC.
                
        if PSA_CIPHER_PADDING_ENABLE
        
            config PSA_CIPHER_PADDING_PKCS7
                bool "Support Cipher Padding Mode PKCS7"
                default y
                
            config PSA_CIPHER_PADDING_ONE_AND_ZEROS
                bool "Support Cipher Padding Mode One and Zeros"
                default y

            config PSA_CIPHER_PADDING_ZEROS_AND_LEN
                bool "Support Cipher Padding Mode Zeros and Len"
                default y

            config PSA_CIPHER_PADDING_ZEROS
                bool "Support Cipher Padding Mode Zeros"
                default y
            
        endif

        menu "AES Configration"
            depends on PSA_CIPHER_SUPPORT_AES

            config PSA_CIPHER_AES_ROM_TABLES
                bool "Use Precomputed AES Tables Stored in ROM"
                default n
                help 
                    Enable this macro to use precomputed AES tables stored in ROM.
                    Disable this macro to generate AES tables in RAM at runtime.
                    
                    Tradeoff: Using precomputed ROM tables reduces RAM usage by ~8kb (or ~2kb if PSA_CIPHER_AES_FEWER_TABLES is used) and reduces the initialization time before the first AES operation can be performed.
                    It comes at the cost of additional ~8kb ROM use (resp. ~2kb if PSA_CIPHER_AES_FEWER_TABLES below is used), and potentially degraded performance if ROM access is slower than RAM access.

                    This option is independent of PSA_CIPHER_AES_FEWER_TABLES.

            config PSA_CIPHER_AES_FEWER_TABLES
                bool "Use less ROM/RAM for AES tables"
                default n                    
                help
                    Enable this macro omits 75% of the AES tables from ROM / RAM (depending on the value of PSA_CIPHER_AES_ROM_TABLES) 
                    by computing their values on the fly during operations(the tables are entry-wise rotations of one another).

                    Tradeoff: Enable this reduces the RAM / ROM footprint by ~6kb 
                    but at the cost of more arithmetic operations during runtime. 
                    Specifically, one has to compare 4 accesses within
                    different tables to 4 accesses with additional arithmetic
                    operations within the same table. The performance gain/loss
                    depends on the system and memory details.
                    
                    This option is independent of PSA_CIPHER_AES_ROM_TABLES.
        endmenu

        menu "Camellia Configration"
            depends on PSA_CIPHER_SUPPORT_CAMELLIA

            config PSA_CAMELLIA_SMALL_MEMORY
                bool "Use Less ROM For the Camellia"
                default n
                help 
                    Use less ROM for the Camellia implementation (saves about 768 bytes).
                    
                    Enable this macro to use less memory for Camellia.

        endmenu

    endif

    menuconfig PSA_KEY_STORAGE_C
        bool "Enable PSA key storage"
        select ENABLE_HAL_SUPPORT
        help 
            Enable the Platform Security Architecture persistent key storage.
            
            Module:  library/psa_crypto_storage.c
    
    if PSA_KEY_STORAGE_C
    
        choice PSA_ITS_TYPE
            prompt "Select ITS Type"
            
                config PSA_ITS_NVS_C
                    bool "Support NVS"
                    help 
                        Enable the emulation of the Platform Security Architecture
                        Internal Trusted Storage (PSA ITS) over NVS.

                        Module:  library/psa_its_nvs.c 
                
                config PSA_ITS_FLASH_C
                    bool "Support FLASH"
                    help 
                        Enable the emulation of the Platform Security Architecture
                        Internal Trusted Storage (PSA ITS) over flash.
                        
                        Module:  library/psa_its_flash.c
        
                config PSA_ITS_FS_C
                    bool "Support File System"
                    help 
                        Enable the emulation of the Platform Security Architecture
                        Internal Trusted Storage (PSA ITS) over files.
                    
                        Module:  library/psa_its_file.c
        
        endchoice

    endif

endmenu
